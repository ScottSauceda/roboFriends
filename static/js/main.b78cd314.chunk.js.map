{"version":3,"sources":["components/Card.js","components/CardList.js","components/ErrorBoundary.js","components/CounterButton.js","components/Header.js","components/Scroll.js","components/SearchBox.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","console","log","map","user","i","key","ErrorBoundary","props","state","hasError","error","info","this","setState","children","Component","CounterButton","updateCount","count","nextProps","nextState","color","onClick","Header","Scroll","style","overflowY","border","height","SearchBox","searchField","searchChange","type","placeholder","onChange","App","onRequestRobots","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","rootReducer","createLogger","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.b78cd314.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({name,email,id}) => {\n    // const {name, email, id} = props;\n    return(\n        <div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5 tc\">\n            <img alt=\"robots\" src={`https://robohash.org/${id}?200x200`} />\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({robots}) => {\n    // if(true) {\n    //     throw new Error('NOOOO!');\n    // }\n    console.log('CardList')\n    return(\n        <div>\n            {\n                robots.map((user, i) => {\n                    return (\n                        <Card \n                            key={i} \n                            id={robots[i].id} \n                            name={robots[i].name} \n                            email={robots[i].email} \n                        />\n                    );\n                })\n            }\n        </div>\n    );\n}\n\nexport default CardList;","import React, { Component } from 'react';\n\nclass ErrorBoundary  extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch(error, info){\n        this.setState({hasError: true});\n    }\n\n    render() {\n        if(this.state.hasError){\n            return <h1>Oooops. That is not good.</h1>;\n        }\n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundary;","import React, { Component } from 'react';\n\nclass CounterButton extends Component {\n    constructor(){\n        super();\n        this.state = {\n            count: 0\n        }\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        if(this.state.count !== nextState.count) {\n            return true\n        }\n        return false;\n    }\n\n    updateCount = () => {\n        this.setState(state => {\n            return { count: state.count + 1}\n            })\n    }\n\n    render() {\n        console.log('CounterButton')\n        return (\n            <button color={this.props.color} onClick={this.updateCount}>\n                Count: {this.state.count}\n            </button>\n        );\n    }\n}\n\nexport default CounterButton;","import React, { Component } from 'react';\nimport CounterButton from './CounterButton';\n\nclass Header extends Component {\n    // shouldComponentUpdate(nextProps, nextState) {\n    //     return false;\n    // }\n    \n    render() {\n        console.log('Header')\n        return (\n            <div>\n                <h1 className='f1'>RoboFriends</h1>\n                <CounterButton color={'red'} />\n            </div>\n        );\n    }\n}\n\nexport default Header;","import React from 'react';\n\n\nconst Scroll = (props) => {\n    // console.log(props);\n    // return props.children;\n    // return <h1>Hi</h1>\n    return (\n        <div style={{overflowY: 'scroll', border: '5px solid black', height: '800px'}} >\n            {props.children}\n        </div>\n    )\n};\n\nexport default Scroll;","import React from 'react';\n\nconst SearchBox = ({searchField, searchChange}) => {\n    console.log('Searchbox');\n    return(\n        <div className = \"pa2\">\n            <input \n                className = \"pa3 ba b--green bg-lightest-blue\"\n                type=\"search\" \n                placeholder=\"search robots\" \n                onChange = {searchChange}\n            />\n        </div>\n    );\n}\n\nexport default SearchBox","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport CardList from '../components/CardList';\nimport ErrorBoundary from '../components/ErrorBoundary';\nimport Header from '../components/Header';\nimport Scroll from '../components/Scroll';\nimport SearchBox from '../components/SearchBox';\nimport './App.css';\n\n\nimport { setSearchField, requestRobots } from '../actions'\n\nconst mapStateToProps = state => {\n    return {\n        searchField: state.searchRobots.searchField,\n        robots: state.requestRobots.robots,\n        isPending: state.requestRobots.isPending,\n        error: state.requestRobots.error\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n        onRequestRobots: () => dispatch(requestRobots())\n    }\n}\n\nclass App extends Component {\n    \n    componentDidMount() {\n       this.props.onRequestRobots();\n    }\n\n    render() {\n        // const { robots } = this.state;\n            const { searchField, onSearchChange, robots, isPending } = this.props;\n            const filteredRobots = robots.filter(robot =>{\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\n        })\n        // if(robots.length === 0){\n            // can also make this ternary, see build react app 6 for code\n        if(isPending){\n            return <h1>Loading</h1>\n        } else {\n            return (\n                <div className=\"tc\">\n                    <Header />\n                    <SearchBox searchChange={onSearchChange} />\n                    <Scroll>\n                        <ErrorBoundary>\n                            <CardList robots={filteredRobots} />\n                        </ErrorBoundary>\n                    </Scroll>\n                </div>\n            );\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { \n        CHANGE_SEARCH_FIELD,\n        REQUEST_ROBOTS_PENDING,\n        REQUEST_ROBOTS_SUCCESS,\n        REQUEST_ROBOTS_FAILED\n} from './constants.js';\n\nexport const setSearchField = (text) => ({\n        type: CHANGE_SEARCH_FIELD,\n        payload: text\n})\n\nexport const requestRobots = () => (dispatch) => {\n        dispatch({ type: REQUEST_ROBOTS_PENDING });\n        fetch('https://jsonplaceholder.typicode.com/users')\n                .then(response => response.json())\n                .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n                .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\n}","export const CHANGE_SEARCH_FIELD = \"CHANGE_SEARCH_FIELD\";\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { \n    CHANGE_SEARCH_FIELD,\n     REQUEST_ROBOTS_PENDING,\n     REQUEST_ROBOTS_SUCCESS,\n     REQUEST_ROBOTS_FAILED\n} from './constants.js';\n\nconst initialStateSearch = {\n    searchField: ''\n}\n\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\n    switch(action.type) {\n        case CHANGE_SEARCH_FIELD:\n            return Object.assign({}, state, { searchField: action.payload})\n        default:\n            return state;\n    }\n}\n\nconst initialStateRobots = {\n    isPending: false,\n    robots: [],\n    error: ''\n}\n\nexport const requestRobots = ( state = initialStateRobots, action={}) => {\n    switch(action.type) {\n        case REQUEST_ROBOTS_PENDING:\n            return Object.assign({}, state, { isPending: true })\n        case REQUEST_ROBOTS_SUCCESS:\n            return Object.assign({}, state, { robots: action.payload, isPending: false})\n        case REQUEST_ROBOTS_FAILED:\n            return Object.assign({}, state, {error: action.payload, isPending: false})\n        default:\n            return state;\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport { searchRobots, requestRobots } from './reducers';\nimport 'tachyons';\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots })\n// const store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger))\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n        <App  />\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}